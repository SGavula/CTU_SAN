library(ISLR)
library(splines)
library(gam)
install.packages("gam")
library(ISLR)
library(splines)
library(gam)
library(akima)
install.packages("akima")
library(ISLR)
library(splines)
library(gam)
library(akima)
attach(Wage) # since now, it is possible to refer to the variables in the Wage data frame by their names alone, without the prefix Wage$
# root mean squared error function for later evaluation
myRMSE = function(m, o){
sqrt(mean((m - o)^2))
}
help(Wage)
head(Wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
plot(maritl,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
plot(maritl,wage)
plot(race,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
plot(maritl,wage)
plot(race,wage)
plot(region,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
plot(maritl,wage)
plot(race,wage)
plot(jobclass,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
plot(maritl,wage)
plot(race,wage)
plot(jobclass,wage)
plot(health,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
plot(maritl,wage)
plot(race,wage)
plot(jobclass,wage)
plot(health,wage)
plot(health_ins,wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
boxplot(year, wage)
plot(maritl,wage)
plot(race,wage)
plot(jobclass,wage)
plot(health,wage)
plot(health_ins,wage)
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage) # simple linear model when using bs() and ns()
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage) # gam must be used to compile smoothing splines and/or local regression
par(mfrow=c(1,3))
plot(gam.m3, se=TRUE,col="blue") # show the gam model that uses smoothing splines (education is categorical and converted into dummy vars), demonstrate the individual components of the model
plot.Gam(gam1, col="red") # do the same plot for the natural spline model
gam.m1=gam(wage~s(age,5)+education,data=Wage) # try various year treatments, this is the model that ignores year
gam.m2=gam(wage~year+s(age,5)+education,data=Wage) # try various year treatments, this is the model that uses a linear function of year
anova(gam.m1,gam.m2,gam.m3,test="F") # compare the models, the linear year model works the best, m2 is preferred
summary(gam.m3) # a summary of the gam fit, p-values for year and age correspond to a H0 of a linear relationship versus Ha of a non-linear relationship, a linear function is sufficient for year, however, a non-linear term is requirred for age
preds=predict(gam.m2,newdata=Wage) # make prediction from gam object
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,data=Wage) # learn a gam with local regression building blocks
plot(gam.lo, se=TRUE, col="green")
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage) # allow for interactions between year and age in local regression
plot(gam.lo.i) # plot the resulting two=dimensional surface, akima library is needed here
install.packages("interp")
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage) # simple linear model when using bs() and ns()
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage) # gam must be used to compile smoothing splines and/or local regression
par(mfrow=c(1,3))
plot(gam.m3, se=TRUE,col="blue") # show the gam model that uses smoothing splines (education is categorical and converted into dummy vars), demonstrate the individual components of the model
plot.Gam(gam1, col="red") # do the same plot for the natural spline model
gam.m1=gam(wage~s(age,5)+education,data=Wage) # try various year treatments, this is the model that ignores year
gam.m2=gam(wage~year+s(age,5)+education,data=Wage) # try various year treatments, this is the model that uses a linear function of year
anova(gam.m1,gam.m2,gam.m3,test="F") # compare the models, the linear year model works the best, m2 is preferred
summary(gam.m3) # a summary of the gam fit, p-values for year and age correspond to a H0 of a linear relationship versus Ha of a non-linear relationship, a linear function is sufficient for year, however, a non-linear term is requirred for age
preds=predict(gam.m2,newdata=Wage) # make prediction from gam object
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,data=Wage) # learn a gam with local regression building blocks
plot(gam.lo, se=TRUE, col="green")
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage) # allow for interactions between year and age in local regression
plot(gam.lo.i) # plot the resulting two=dimensional surface, akima library is needed here
library(caret)
install.packages("caret")
library(caret)
nFolds <- 10
myFolds <- createFolds(seq(nrow(Wage)),nFolds)
pred <- rep(NA,nrow(Wage))
for (f in seq(nFolds)){
gam.m2=gam(wage~year+s(age,5)+education,data=Wage[-myFolds[f][[1]],])
pred[myFolds[f][[1]]] <- predict(gam.m2,Wage[myFolds[f][[1]],])
}
myRMSE(pred,Wage$wage) # the cross-validated RMSE of the model based on year, age and education
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage) anova(gam.m1,gam.m2,gam.m3, my_gam.m1,test="F")
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage) anova(gam.m1,gam.m2,gam.m3,my_gam.m1,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health,data=Wage)anova(gam.m1,gam.m2,gam.m3,my_gam.m1,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
#anova(gam.m1,gam.m2,gam.m3,my_gam.m1,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
nobs(gam.m1)
nobs(gam.m2)
nobs(gam.m3)
nobs(my_gam.m1)
#anova(gam.m1,gam.m2,gam.m3,my_gam.m1,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
nova(gam.m1,gam.m2,gam.m3,test="F")
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage) # fit the regression spline model
pred=predict(fit,newdata=list(age=age.grid),se=T) # make predictions on the same regular age grid we used for polynomial models
library(ISLR)
library(splines)
library(gam)
library(akima)
attach(Wage) # since now, it is possible to refer to the variables in the Wage data frame by their names alone, without the prefix Wage$
# root mean squared error function for later evaluation
myRMSE = function(m, o){
sqrt(mean((m - o)^2))
}
help(Wage)
head(Wage)
help(Wage) # Wage and other data for a group of 3000 male workers in the Mid-Atlantic region
summary(Wage) # learn the structure of the dataset
Wage$region<-NULL # no information in region variable, remove it, may cause errors in later models
plot(age,wage) # remember a few relationships/plots from the lecture
plot(education,wage)
plot(year,wage)
boxplot(year, wage)
plot(maritl,wage)
plot(race,wage)
plot(jobclass,wage)
plot(health,wage)
plot(health_ins,wage)
fit=lm(wage~poly(age,4),data=Wage) # learn the 4th degree polynomial age model with orthogonal polynomials
coef(summary(fit)) # show the model coefs
fit2=lm(wage~poly(age,4,raw=T),data=Wage) # learn the 4th degree polynomial age model with raw polynomials
coef(summary(fit2)) # the coefs and p-values change, later we will see it does not affect the fitted values
fit2a=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage) # explicitly calculate the higher-order terms, I inhibits the interpretation of ^ as a formula crossing/interaction operator, it would make no effect with the only variable age
coef(fit2a) # no change from fit2
fit2b=lm(wage~cbind(age,age^2,age^3,age^4),data=Wage) # explicitly calculate the higher powers, store them into a data.frame
coef(fit2b) # no change from fit2 nor fit2a
agelims=range(age) # compare all the models created above, create a regular grid of ages to test
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE) # use the orthogonal polynomial model first
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit) # construct 95% confidence intervals
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
preds2=predict(fit2,newdata=list(age=age.grid),se=TRUE) # compare with the second fit (we have already found out that 2b and 2c must be identical)
max(abs(preds$fit-preds2$fit)) # there is nearly no difference between the predictions
se2.bands=cbind(preds2$fit+2*preds2$se.fit,preds2$fit-2*preds2$se.fit) # construct 95% confidence intervals
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
lines(age.grid,preds2$fit,lwd=2,col="blue")
matlines(age.grid,se2.bands,lwd=1,col="blue",lty=3)
fit.1=lm(wage~age,data=Wage)
fit.2=lm(wage~poly(age,2),data=Wage)
fit.3=lm(wage~poly(age,3),data=Wage)
fit.4=lm(wage~poly(age,4),data=Wage)
fit.5=lm(wage~poly(age,5),data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
coef(summary(fit.5))
(-11.983)^2 # show that the square of the t-stat for the quadratic model equals the F-stat for the quadratic model taken from ANOVA
fit.1=lm(wage~education+age,data=Wage)
fit.2=lm(wage~education+poly(age,2),data=Wage)
fit.3=lm(wage~education+poly(age,3),data=Wage)
anova(fit.1,fit.2,fit.3)
table(cut(age,4))
fit=lm(wage~cut(age,4),data=Wage)
coef(summary(fit))
preds=predict(fit,newdata=list(age=age.grid),se=TRUE) # make predictions on the same regular age grid we used for polynomial models
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit) # construct 95% confidence intervals
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey",main="Step regression")
lines(age.grid,preds$fit,lwd=2,col="darkgreen")
matlines(age.grid,se.bands,lwd=1,col="darkgreen",lty=3)
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage) # fit the regression spline model
pred=predict(fit,newdata=list(age=age.grid),se=T) # make predictions on the same regular age grid we used for polynomial models
plot(age,wage,col="gray",main="Cubic regression splines with 3 knots") # show the prediction plot
lines(age.grid,pred$fit,lwd=2,col="blue")
lines(age.grid,pred$fit+2*pred$se,lty="dashed",col="blue")
lines(age.grid,pred$fit-2*pred$se,lty="dashed",col="blue")
dim(bs(age,knots=c(25,40,60))) # 6 splines produced
dim(bs(age,df=6)) # alternative definition, 6 splines again. knots at uniform quantiles of age
attr(bs(age,df=6),"knots") # show the knots, taken at uniform quantiles (25th, 50th, 75th), their number derived from df
fit2=lm(wage~ns(age,df=4),data=Wage)
pred2=predict(fit2,newdata=list(age=age.grid),se=T)
lines(age.grid, pred2$fit,col="red",lwd=2)
lines(age.grid,pred2$fit+2*pred2$se,lty="dashed",col="red")
lines(age.grid,pred2$fit-2*pred2$se,lty="dashed",col="red")
legend("topright",legend=c("Cubic spline","Natural cubic spline"),col=c("blue","red"),lty=1,lwd=2,cex=.8)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey", main="Smoothing Spline")
fit=smooth.spline(age,wage,df=16) # a user pre-defined dfs
fit2=smooth.spline(age,wage,cv=TRUE) # the optimal df number found with CV
fit2$df # the number of dfs found with CV
lines(fit,col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
legend("topright",legend=c("16 DF","6.8 DF"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey",main="Local Regression")
fit=loess(wage~age,span=.2,data=Wage) # local regression where each neighborhood consists of 20% of the observations
fit2=loess(wage~age,span=.5,data=Wage) # local regression where each neighborhood consists of 50% of the observations
lines(age.grid,predict(fit,data.frame(age=age.grid)),col="red",lwd=2)
lines(age.grid,predict(fit2,data.frame(age=age.grid)),col="blue",lwd=2)
legend("topright",legend=c("Span=0.2","Span=0.5"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage) # simple linear model when using bs() and ns()
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage) # gam must be used to compile smoothing splines and/or local regression
par(mfrow=c(1,3))
plot(gam.m3, se=TRUE,col="blue") # show the gam model that uses smoothing splines (education is categorical and converted into dummy vars), demonstrate the individual components of the model
plot.Gam(gam1, col="red") # do the same plot for the natural spline model
gam.m1=gam(wage~s(age,5)+education,data=Wage) # try various year treatments, this is the model that ignores year
gam.m2=gam(wage~year+s(age,5)+education,data=Wage) # try various year treatments, this is the model that uses a linear function of year
anova(gam.m1,gam.m2,gam.m3,test="F") # compare the models, the linear year model works the best, m2 is preferred
summary(gam.m3) # a summary of the gam fit, p-values for year and age correspond to a H0 of a linear relationship versus Ha of a non-linear relationship, a linear function is sufficient for year, however, a non-linear term is requirred for age
preds=predict(gam.m2,newdata=Wage) # make prediction from gam object
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,data=Wage) # learn a gam with local regression building blocks
plot(gam.lo, se=TRUE, col="green")
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage) # allow for interactions between year and age in local regression
plot(gam.lo.i) # plot the resulting two=dimensional surface, akima library is needed here
library(caret)
nFolds <- 10
myFolds <- createFolds(seq(nrow(Wage)),nFolds)
pred <- rep(NA,nrow(Wage))
for (f in seq(nFolds)){
gam.m2=gam(wage~year+s(age,5)+education,data=Wage[-myFolds[f][[1]],])
pred[myFolds[f][[1]]] <- predict(gam.m2,Wage[myFolds[f][[1]],])
}
myRMSE(pred,Wage$wage) # the cross-validated RMSE of the model based on year, age and education
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
nova(gam.m1,gam.m2,gam.m3,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,test="F")
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage) # simple linear model when using bs() and ns()
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage) # gam must be used to compile smoothing splines and/or local regression
par(mfrow=c(1,3))
plot(gam.m3, se=TRUE,col="blue") # show the gam model that uses smoothing splines (education is categorical and converted into dummy vars), demonstrate the individual components of the model
plot.Gam(gam1, col="red") # do the same plot for the natural spline model
gam.m1=gam(wage~s(age,5)+education,data=Wage) # try various year treatments, this is the model that ignores year
gam.m2=gam(wage~year+s(age,5)+education,data=Wage) # try various year treatments, this is the model that uses a linear function of year
anova(gam.m1,gam.m2,gam.m3,test="F") # compare the models, the linear year model works the best, m2 is preferred
summary(gam.m3) # a summary of the gam fit, p-values for year and age correspond to a H0 of a linear relationship versus Ha of a non-linear relationship, a linear function is sufficient for year, however, a non-linear term is requirred for age
preds=predict(gam.m2,newdata=Wage) # make prediction from gam object
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,data=Wage) # learn a gam with local regression building blocks
plot(gam.lo, se=TRUE, col="green")
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage) # allow for interactions between year and age in local regression
plot(gam.lo.i) # plot the resulting two=dimensional surface, akima library is needed here
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1, test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1, test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl,data=Wage)
anova(my_gam.m1, gam.m1,gam.m2,gam.m3, test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1 test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1, test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1, test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m2=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1,my_gam.m2, test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m2=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health,data=Wage)
my_gam.m2=gam(wage~year+s(age,5)+education+jobclass+health,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1,my_gam.m2, test="F")
# my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m1=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health+health_ins,data=Wage)
my_gam.m2=gam(wage~year+s(age,5)+education+maritl+race+jobclass+health,data=Wage)
my_gam.m3=gam(wage~year+s(age,5)+education+jobclass+health,data=Wage)
anova(gam.m1,gam.m2,gam.m3,my_gam.m1,my_gam.m2,my_gam.m3, test="F")
